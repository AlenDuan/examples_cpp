On Daint with gcc 5.1.0 compile with 

g++ -o hello_world_1 hello_world_1.cpp -std=c++11 -pthread

The link to pthread shows that a thrading low level backend is needed, can we
provide example of other cases?

#1 (1.4): 
   Notes:
   1- Every thread needs an "initial function", where new thread execution
   begins. For the "main" thread this is the main functions.
   2- A call to thread constructor creates a new thread, which is responsible
   for the execution of the provided initial function.
   3- The main thread continues its execution completely independently from the new one
   and it would reach the program end in absence of the join statement.	

   Questions:
   1- What are main differences with normal hello world?
   2- How many times the message will be printed?

#2 (2.1.1): 
   Notes:
   1- std::threads works with any callable type, namely....	
   2- Callable object, like structs with oprator() method, are copied by
   thread ctor so the external original variable could also go out of scope
   without any problem (in absence of other references to destroyed
   variables, see next example).
   
   Questions:
   1- What happen passing a temporary to thread ctor without uniform
	initialization syntax (most vexing parse)?

#3 (2.1.2-2.1.4): 
   Notes:
   1- Basic thread management is done using .join and .detach. 
   2- .join blocks the method calling function until the thread work is
   finished and then cleans any storage associated with the joined thread:
   the std::thread object is no longer associated with the now finished thread.
   3- The above cleaning condition is true also for finished thread, even if
   we do not call the join method. This needs to be managed when we deal with
   detached threads.
   4- .detach method puts the thread on the background, ownership and control
   is passed to C++ RT Libraryand cannot be joined. We can check his status
   with the .joinable method. Basically this means that we are detaching the
   cpu process from the C++ std::threads object. 
   5- Both .join and .detach method can only be executable on a joinable thread.

   Questions:
   1- What is the equivalent in OpenMP?
   2- When it is useful to have detached threads?

#4 (2.2):
   Notes:
   1- Basic syntax for passing parameters to thread function.
   2- Input parameters are always copied into thread internal storage, even
   if the thread function expects a reference.
   3- In order to really pass a reference the i/o parameter must be wrapped
   by std::ref().
   	  3.1- The above comment seems to be not completely correct, without
	  std::ref the code does not compile at all.
	  4- std::thread constructor and std::bind operation are based on the same
	  mechanism, therefore member function pointers can be provided as thread
	  function.

   Questions:
   1- Explanation of the error in case of missing std::ref().

#5 (2.5):
   Notes:
   1- Thread can be identified using the associated std::thread::id object
   instance, that can be retrieved with .get_id() or with
   std::this_thread::get_id() from within thread context, like for "master thread".
   2- std::thread::id is a copyable and comparable object providing all
   comparison operators and that can be therefore used for thread ordering
   purposes (e.g., with a map).
   3- an std::thread with no execution thread has a "not any thread" id
   status which corresponds to the one of a default constructed thread.
   4- std::thread::id can be provided to output stream but the resulting
   value has no semantic meaning and is only useful for debugging.

   Questions:
   1- Why not joining t3?
   2- Which other information can be retrieved from std::this_thread?
   3- How are thread numbered in pthreads?	

#6 (2.3):
   Notes:
   1- std::thread is a resource owning type and as other C++ tyopes with this
   feature are movable but not copyable. The resource in this case is the
   execution thread.
   2- The ownership of the execution thread can be moved among different
   std::thread instances making use of move semantics, excplicitely with
   std::move construct or implicitely with temporaries.
   3- Ownership can be moved through function.
   4- The move support in std::thread allows to create containers of threads
   if the container themselves are move aware (such as the std::vector
   one).     

   Questions:
   1- What is the meaning of RAII
   2- How can I transfer ownership to the main thread?
   3- Which are the other move aware containers and which one have been
   updated to support this feature?

#7 (2.4): 
   Notes:
   1- The maximum number of thread that can truly run concurrently is given
   by std::thread::hardware_concurrency()

   Questions:
   1- Which other info can be obtained as in note 1?	
   2- Is there a way to control number of threads with a flag as in OpenMP?


TODO: 
4.3.1: clarify when and why this works...
5.4: more information about std::thread::id value usage for debugging

General questions:	  
1- Move semantics and std::move
2- deleted and defaulted
3- RAII
